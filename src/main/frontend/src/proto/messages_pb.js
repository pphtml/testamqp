/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ClientDisconnect', null, global);
goog.exportSymbol('proto.Message', null, global);
goog.exportSymbol('proto.PeriodicVehiclesUpdate', null, global);
goog.exportSymbol('proto.PlayerStartRequest', null, global);
goog.exportSymbol('proto.PlayerStartResponse', null, global);
goog.exportSymbol('proto.PlayerUpdateRequest', null, global);
goog.exportSymbol('proto.PlayerUpdateResponse', null, global);
goog.exportSymbol('proto.Resize', null, global);
goog.exportSymbol('proto.SectorData', null, global);
goog.exportSymbol('proto.SectorData.RoadType', null, global);
goog.exportSymbol('proto.TimeInfo', null, global);
goog.exportSymbol('proto.VehicleData', null, global);
goog.exportSymbol('proto.VehiclePart', null, global);
goog.exportSymbol('proto.VehiclePart.PartType', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Message.oneofGroups_);
};
goog.inherits(proto.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Message.displayName = 'proto.Message';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Message.oneofGroups_ = [[1,2,3,4,5,6,9]];

/**
 * @enum {number}
 */
proto.Message.MsgCase = {
  MSG_NOT_SET: 0,
  PLAYERSTARTREQUEST: 1,
  PLAYERSTARTRESPONSE: 2,
  PLAYERUPDATEREQUEST: 3,
  PLAYERUPDATERESPONSE: 4,
  RESIZE: 5,
  PERIODICVEHICLEUPDATE: 6,
  CLIENTDISCONNECT: 9
};

/**
 * @return {proto.Message.MsgCase}
 */
proto.Message.prototype.getMsgCase = function() {
  return /** @type {proto.Message.MsgCase} */(jspb.Message.computeOneofCase(this, proto.Message.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerstartrequest: (f = msg.getPlayerstartrequest()) && proto.PlayerStartRequest.toObject(includeInstance, f),
    playerstartresponse: (f = msg.getPlayerstartresponse()) && proto.PlayerStartResponse.toObject(includeInstance, f),
    playerupdaterequest: (f = msg.getPlayerupdaterequest()) && proto.PlayerUpdateRequest.toObject(includeInstance, f),
    playerupdateresponse: (f = msg.getPlayerupdateresponse()) && proto.PlayerUpdateResponse.toObject(includeInstance, f),
    resize: (f = msg.getResize()) && proto.Resize.toObject(includeInstance, f),
    periodicvehicleupdate: (f = msg.getPeriodicvehicleupdate()) && proto.PeriodicVehiclesUpdate.toObject(includeInstance, f),
    clientdisconnect: (f = msg.getClientdisconnect()) && proto.ClientDisconnect.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Message}
 */
proto.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Message;
  return proto.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Message}
 */
proto.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PlayerStartRequest;
      reader.readMessage(value,proto.PlayerStartRequest.deserializeBinaryFromReader);
      msg.setPlayerstartrequest(value);
      break;
    case 2:
      var value = new proto.PlayerStartResponse;
      reader.readMessage(value,proto.PlayerStartResponse.deserializeBinaryFromReader);
      msg.setPlayerstartresponse(value);
      break;
    case 3:
      var value = new proto.PlayerUpdateRequest;
      reader.readMessage(value,proto.PlayerUpdateRequest.deserializeBinaryFromReader);
      msg.setPlayerupdaterequest(value);
      break;
    case 4:
      var value = new proto.PlayerUpdateResponse;
      reader.readMessage(value,proto.PlayerUpdateResponse.deserializeBinaryFromReader);
      msg.setPlayerupdateresponse(value);
      break;
    case 5:
      var value = new proto.Resize;
      reader.readMessage(value,proto.Resize.deserializeBinaryFromReader);
      msg.setResize(value);
      break;
    case 6:
      var value = new proto.PeriodicVehiclesUpdate;
      reader.readMessage(value,proto.PeriodicVehiclesUpdate.deserializeBinaryFromReader);
      msg.setPeriodicvehicleupdate(value);
      break;
    case 9:
      var value = new proto.ClientDisconnect;
      reader.readMessage(value,proto.ClientDisconnect.deserializeBinaryFromReader);
      msg.setClientdisconnect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerstartrequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PlayerStartRequest.serializeBinaryToWriter
    );
  }
  f = message.getPlayerstartresponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.PlayerStartResponse.serializeBinaryToWriter
    );
  }
  f = message.getPlayerupdaterequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.PlayerUpdateRequest.serializeBinaryToWriter
    );
  }
  f = message.getPlayerupdateresponse();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.PlayerUpdateResponse.serializeBinaryToWriter
    );
  }
  f = message.getResize();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Resize.serializeBinaryToWriter
    );
  }
  f = message.getPeriodicvehicleupdate();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.PeriodicVehiclesUpdate.serializeBinaryToWriter
    );
  }
  f = message.getClientdisconnect();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.ClientDisconnect.serializeBinaryToWriter
    );
  }
};


/**
 * optional PlayerStartRequest playerStartRequest = 1;
 * @return {?proto.PlayerStartRequest}
 */
proto.Message.prototype.getPlayerstartrequest = function() {
  return /** @type{?proto.PlayerStartRequest} */ (
    jspb.Message.getWrapperField(this, proto.PlayerStartRequest, 1));
};


/** @param {?proto.PlayerStartRequest|undefined} value */
proto.Message.prototype.setPlayerstartrequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.Message.oneofGroups_[0], value);
};


proto.Message.prototype.clearPlayerstartrequest = function() {
  this.setPlayerstartrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Message.prototype.hasPlayerstartrequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PlayerStartResponse playerStartResponse = 2;
 * @return {?proto.PlayerStartResponse}
 */
proto.Message.prototype.getPlayerstartresponse = function() {
  return /** @type{?proto.PlayerStartResponse} */ (
    jspb.Message.getWrapperField(this, proto.PlayerStartResponse, 2));
};


/** @param {?proto.PlayerStartResponse|undefined} value */
proto.Message.prototype.setPlayerstartresponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.Message.oneofGroups_[0], value);
};


proto.Message.prototype.clearPlayerstartresponse = function() {
  this.setPlayerstartresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Message.prototype.hasPlayerstartresponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PlayerUpdateRequest playerUpdateRequest = 3;
 * @return {?proto.PlayerUpdateRequest}
 */
proto.Message.prototype.getPlayerupdaterequest = function() {
  return /** @type{?proto.PlayerUpdateRequest} */ (
    jspb.Message.getWrapperField(this, proto.PlayerUpdateRequest, 3));
};


/** @param {?proto.PlayerUpdateRequest|undefined} value */
proto.Message.prototype.setPlayerupdaterequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.Message.oneofGroups_[0], value);
};


proto.Message.prototype.clearPlayerupdaterequest = function() {
  this.setPlayerupdaterequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Message.prototype.hasPlayerupdaterequest = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PlayerUpdateResponse playerUpdateResponse = 4;
 * @return {?proto.PlayerUpdateResponse}
 */
proto.Message.prototype.getPlayerupdateresponse = function() {
  return /** @type{?proto.PlayerUpdateResponse} */ (
    jspb.Message.getWrapperField(this, proto.PlayerUpdateResponse, 4));
};


/** @param {?proto.PlayerUpdateResponse|undefined} value */
proto.Message.prototype.setPlayerupdateresponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.Message.oneofGroups_[0], value);
};


proto.Message.prototype.clearPlayerupdateresponse = function() {
  this.setPlayerupdateresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Message.prototype.hasPlayerupdateresponse = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Resize resize = 5;
 * @return {?proto.Resize}
 */
proto.Message.prototype.getResize = function() {
  return /** @type{?proto.Resize} */ (
    jspb.Message.getWrapperField(this, proto.Resize, 5));
};


/** @param {?proto.Resize|undefined} value */
proto.Message.prototype.setResize = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.Message.oneofGroups_[0], value);
};


proto.Message.prototype.clearResize = function() {
  this.setResize(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Message.prototype.hasResize = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional PeriodicVehiclesUpdate periodicVehicleUpdate = 6;
 * @return {?proto.PeriodicVehiclesUpdate}
 */
proto.Message.prototype.getPeriodicvehicleupdate = function() {
  return /** @type{?proto.PeriodicVehiclesUpdate} */ (
    jspb.Message.getWrapperField(this, proto.PeriodicVehiclesUpdate, 6));
};


/** @param {?proto.PeriodicVehiclesUpdate|undefined} value */
proto.Message.prototype.setPeriodicvehicleupdate = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.Message.oneofGroups_[0], value);
};


proto.Message.prototype.clearPeriodicvehicleupdate = function() {
  this.setPeriodicvehicleupdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Message.prototype.hasPeriodicvehicleupdate = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ClientDisconnect clientDisconnect = 9;
 * @return {?proto.ClientDisconnect}
 */
proto.Message.prototype.getClientdisconnect = function() {
  return /** @type{?proto.ClientDisconnect} */ (
    jspb.Message.getWrapperField(this, proto.ClientDisconnect, 9));
};


/** @param {?proto.ClientDisconnect|undefined} value */
proto.Message.prototype.setClientdisconnect = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.Message.oneofGroups_[0], value);
};


proto.Message.prototype.clearClientdisconnect = function() {
  this.setClientdisconnect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Message.prototype.hasClientdisconnect = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlayerStartRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PlayerStartRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PlayerStartRequest.displayName = 'proto.PlayerStartRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlayerStartRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PlayerStartRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlayerStartRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerStartRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    vehicletype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    vehicledesign: jspb.Message.getFieldWithDefault(msg, 3, ""),
    initiated: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlayerStartRequest}
 */
proto.PlayerStartRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlayerStartRequest;
  return proto.PlayerStartRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlayerStartRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlayerStartRequest}
 */
proto.PlayerStartRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVehicletype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVehicledesign(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInitiated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlayerStartRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlayerStartRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlayerStartRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerStartRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVehicletype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVehicledesign();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInitiated();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.PlayerStartRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.PlayerStartRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string vehicleType = 2;
 * @return {string}
 */
proto.PlayerStartRequest.prototype.getVehicletype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.PlayerStartRequest.prototype.setVehicletype = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string vehicleDesign = 3;
 * @return {string}
 */
proto.PlayerStartRequest.prototype.getVehicledesign = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.PlayerStartRequest.prototype.setVehicledesign = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 initiated = 4;
 * @return {number}
 */
proto.PlayerStartRequest.prototype.getInitiated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.PlayerStartRequest.prototype.setInitiated = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlayerStartResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PlayerStartResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PlayerStartResponse.displayName = 'proto.PlayerStartResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlayerStartResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.PlayerStartResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlayerStartResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerStartResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeinfo: (f = msg.getTimeinfo()) && proto.TimeInfo.toObject(includeInstance, f),
    worldwidth: jspb.Message.getFieldWithDefault(msg, 2, 0),
    worldheight: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sectorwidth: jspb.Message.getFieldWithDefault(msg, 4, 0),
    sectorheight: jspb.Message.getFieldWithDefault(msg, 5, 0),
    sectormapMap: (f = msg.getSectormapMap()) ? f.toObject(includeInstance, proto.SectorData.toObject) : [],
    birthlocationx: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    birthlocationy: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    birthorientation: +jspb.Message.getFieldWithDefault(msg, 9, 0.0),
    basespeed: +jspb.Message.getFieldWithDefault(msg, 10, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlayerStartResponse}
 */
proto.PlayerStartResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlayerStartResponse;
  return proto.PlayerStartResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlayerStartResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlayerStartResponse}
 */
proto.PlayerStartResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.TimeInfo;
      reader.readMessage(value,proto.TimeInfo.deserializeBinaryFromReader);
      msg.setTimeinfo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWorldwidth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWorldheight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSectorwidth(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSectorheight(value);
      break;
    case 6:
      var value = msg.getSectormapMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.SectorData.deserializeBinaryFromReader);
         });
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBirthlocationx(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBirthlocationy(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBirthorientation(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBasespeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlayerStartResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlayerStartResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlayerStartResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerStartResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.TimeInfo.serializeBinaryToWriter
    );
  }
  f = message.getWorldwidth();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getWorldheight();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getSectorwidth();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getSectorheight();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getSectormapMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.SectorData.serializeBinaryToWriter);
  }
  f = message.getBirthlocationx();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getBirthlocationy();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getBirthorientation();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = message.getBasespeed();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
};


/**
 * optional TimeInfo timeInfo = 1;
 * @return {?proto.TimeInfo}
 */
proto.PlayerStartResponse.prototype.getTimeinfo = function() {
  return /** @type{?proto.TimeInfo} */ (
    jspb.Message.getWrapperField(this, proto.TimeInfo, 1));
};


/** @param {?proto.TimeInfo|undefined} value */
proto.PlayerStartResponse.prototype.setTimeinfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.PlayerStartResponse.prototype.clearTimeinfo = function() {
  this.setTimeinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PlayerStartResponse.prototype.hasTimeinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 worldWidth = 2;
 * @return {number}
 */
proto.PlayerStartResponse.prototype.getWorldwidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.PlayerStartResponse.prototype.setWorldwidth = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 worldHeight = 3;
 * @return {number}
 */
proto.PlayerStartResponse.prototype.getWorldheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.PlayerStartResponse.prototype.setWorldheight = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 sectorWidth = 4;
 * @return {number}
 */
proto.PlayerStartResponse.prototype.getSectorwidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.PlayerStartResponse.prototype.setSectorwidth = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 sectorHeight = 5;
 * @return {number}
 */
proto.PlayerStartResponse.prototype.getSectorheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.PlayerStartResponse.prototype.setSectorheight = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * map<string, SectorData> sectorMap = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.SectorData>}
 */
proto.PlayerStartResponse.prototype.getSectormapMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.SectorData>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      proto.SectorData));
};


proto.PlayerStartResponse.prototype.clearSectormapMap = function() {
  this.getSectormapMap().clear();
};


/**
 * optional float birthLocationX = 7;
 * @return {number}
 */
proto.PlayerStartResponse.prototype.getBirthlocationx = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.PlayerStartResponse.prototype.setBirthlocationx = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float birthLocationY = 8;
 * @return {number}
 */
proto.PlayerStartResponse.prototype.getBirthlocationy = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.PlayerStartResponse.prototype.setBirthlocationy = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional float birthOrientation = 9;
 * @return {number}
 */
proto.PlayerStartResponse.prototype.getBirthorientation = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.PlayerStartResponse.prototype.setBirthorientation = function(value) {
  jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional float baseSpeed = 10;
 * @return {number}
 */
proto.PlayerStartResponse.prototype.getBasespeed = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.PlayerStartResponse.prototype.setBasespeed = function(value) {
  jspb.Message.setProto3FloatField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SectorData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SectorData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SectorData.displayName = 'proto.SectorData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SectorData.prototype.toObject = function(opt_includeInstance) {
  return proto.SectorData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SectorData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SectorData.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFieldWithDefault(msg, 1, 0),
    y: jspb.Message.getFieldWithDefault(msg, 2, 0),
    north: jspb.Message.getFieldWithDefault(msg, 3, 0),
    east: jspb.Message.getFieldWithDefault(msg, 4, 0),
    south: jspb.Message.getFieldWithDefault(msg, 5, 0),
    west: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SectorData}
 */
proto.SectorData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SectorData;
  return proto.SectorData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SectorData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SectorData}
 */
proto.SectorData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {!proto.SectorData.RoadType} */ (reader.readEnum());
      msg.setNorth(value);
      break;
    case 4:
      var value = /** @type {!proto.SectorData.RoadType} */ (reader.readEnum());
      msg.setEast(value);
      break;
    case 5:
      var value = /** @type {!proto.SectorData.RoadType} */ (reader.readEnum());
      msg.setSouth(value);
      break;
    case 6:
      var value = /** @type {!proto.SectorData.RoadType} */ (reader.readEnum());
      msg.setWest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SectorData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SectorData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SectorData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SectorData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getNorth();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getEast();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getSouth();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getWest();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.SectorData.RoadType = {
  NONE: 0,
  SINGLE: 1,
  DOUBLE: 2,
  TRIPLE: 3
};

/**
 * optional int32 x = 1;
 * @return {number}
 */
proto.SectorData.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SectorData.prototype.setX = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 y = 2;
 * @return {number}
 */
proto.SectorData.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SectorData.prototype.setY = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional RoadType north = 3;
 * @return {!proto.SectorData.RoadType}
 */
proto.SectorData.prototype.getNorth = function() {
  return /** @type {!proto.SectorData.RoadType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.SectorData.RoadType} value */
proto.SectorData.prototype.setNorth = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional RoadType east = 4;
 * @return {!proto.SectorData.RoadType}
 */
proto.SectorData.prototype.getEast = function() {
  return /** @type {!proto.SectorData.RoadType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.SectorData.RoadType} value */
proto.SectorData.prototype.setEast = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional RoadType south = 5;
 * @return {!proto.SectorData.RoadType}
 */
proto.SectorData.prototype.getSouth = function() {
  return /** @type {!proto.SectorData.RoadType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.SectorData.RoadType} value */
proto.SectorData.prototype.setSouth = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional RoadType west = 6;
 * @return {!proto.SectorData.RoadType}
 */
proto.SectorData.prototype.getWest = function() {
  return /** @type {!proto.SectorData.RoadType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.SectorData.RoadType} value */
proto.SectorData.prototype.setWest = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlayerUpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PlayerUpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PlayerUpdateRequest.displayName = 'proto.PlayerUpdateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlayerUpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PlayerUpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlayerUpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerUpdateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    orientationrequested: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    speedmultiplier: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    initiated: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlayerUpdateRequest}
 */
proto.PlayerUpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlayerUpdateRequest;
  return proto.PlayerUpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlayerUpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlayerUpdateRequest}
 */
proto.PlayerUpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOrientationrequested(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpeedmultiplier(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInitiated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlayerUpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlayerUpdateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlayerUpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerUpdateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrientationrequested();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getSpeedmultiplier();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getInitiated();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional float orientationRequested = 1;
 * @return {number}
 */
proto.PlayerUpdateRequest.prototype.getOrientationrequested = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.PlayerUpdateRequest.prototype.setOrientationrequested = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float speedMultiplier = 2;
 * @return {number}
 */
proto.PlayerUpdateRequest.prototype.getSpeedmultiplier = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.PlayerUpdateRequest.prototype.setSpeedmultiplier = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional int64 initiated = 3;
 * @return {number}
 */
proto.PlayerUpdateRequest.prototype.getInitiated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.PlayerUpdateRequest.prototype.setInitiated = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlayerUpdateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PlayerUpdateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PlayerUpdateResponse.displayName = 'proto.PlayerUpdateResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlayerUpdateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.PlayerUpdateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlayerUpdateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerUpdateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeinfo: (f = msg.getTimeinfo()) && proto.TimeInfo.toObject(includeInstance, f),
    vehicledata: (f = msg.getVehicledata()) && proto.VehicleData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlayerUpdateResponse}
 */
proto.PlayerUpdateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlayerUpdateResponse;
  return proto.PlayerUpdateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlayerUpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlayerUpdateResponse}
 */
proto.PlayerUpdateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.TimeInfo;
      reader.readMessage(value,proto.TimeInfo.deserializeBinaryFromReader);
      msg.setTimeinfo(value);
      break;
    case 2:
      var value = new proto.VehicleData;
      reader.readMessage(value,proto.VehicleData.deserializeBinaryFromReader);
      msg.setVehicledata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlayerUpdateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlayerUpdateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlayerUpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerUpdateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.TimeInfo.serializeBinaryToWriter
    );
  }
  f = message.getVehicledata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.VehicleData.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimeInfo timeInfo = 1;
 * @return {?proto.TimeInfo}
 */
proto.PlayerUpdateResponse.prototype.getTimeinfo = function() {
  return /** @type{?proto.TimeInfo} */ (
    jspb.Message.getWrapperField(this, proto.TimeInfo, 1));
};


/** @param {?proto.TimeInfo|undefined} value */
proto.PlayerUpdateResponse.prototype.setTimeinfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.PlayerUpdateResponse.prototype.clearTimeinfo = function() {
  this.setTimeinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PlayerUpdateResponse.prototype.hasTimeinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VehicleData vehicleData = 2;
 * @return {?proto.VehicleData}
 */
proto.PlayerUpdateResponse.prototype.getVehicledata = function() {
  return /** @type{?proto.VehicleData} */ (
    jspb.Message.getWrapperField(this, proto.VehicleData, 2));
};


/** @param {?proto.VehicleData|undefined} value */
proto.PlayerUpdateResponse.prototype.setVehicledata = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.PlayerUpdateResponse.prototype.clearVehicledata = function() {
  this.setVehicledata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PlayerUpdateResponse.prototype.hasVehicledata = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PeriodicVehiclesUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PeriodicVehiclesUpdate.repeatedFields_, null);
};
goog.inherits(proto.PeriodicVehiclesUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PeriodicVehiclesUpdate.displayName = 'proto.PeriodicVehiclesUpdate';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PeriodicVehiclesUpdate.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PeriodicVehiclesUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.PeriodicVehiclesUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PeriodicVehiclesUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PeriodicVehiclesUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    servertimestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    vehiclesList: jspb.Message.toObjectList(msg.getVehiclesList(),
    proto.VehicleData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PeriodicVehiclesUpdate}
 */
proto.PeriodicVehiclesUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PeriodicVehiclesUpdate;
  return proto.PeriodicVehiclesUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PeriodicVehiclesUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PeriodicVehiclesUpdate}
 */
proto.PeriodicVehiclesUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setServertimestamp(value);
      break;
    case 2:
      var value = new proto.VehicleData;
      reader.readMessage(value,proto.VehicleData.deserializeBinaryFromReader);
      msg.addVehicles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PeriodicVehiclesUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PeriodicVehiclesUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PeriodicVehiclesUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PeriodicVehiclesUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServertimestamp();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getVehiclesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.VehicleData.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 serverTimestamp = 1;
 * @return {number}
 */
proto.PeriodicVehiclesUpdate.prototype.getServertimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.PeriodicVehiclesUpdate.prototype.setServertimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated VehicleData vehicles = 2;
 * @return {!Array.<!proto.VehicleData>}
 */
proto.PeriodicVehiclesUpdate.prototype.getVehiclesList = function() {
  return /** @type{!Array.<!proto.VehicleData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VehicleData, 2));
};


/** @param {!Array.<!proto.VehicleData>} value */
proto.PeriodicVehiclesUpdate.prototype.setVehiclesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.VehicleData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VehicleData}
 */
proto.PeriodicVehiclesUpdate.prototype.addVehicles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.VehicleData, opt_index);
};


proto.PeriodicVehiclesUpdate.prototype.clearVehiclesList = function() {
  this.setVehiclesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VehicleData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VehicleData.repeatedFields_, null);
};
goog.inherits(proto.VehicleData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VehicleData.displayName = 'proto.VehicleData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VehicleData.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VehicleData.prototype.toObject = function(opt_includeInstance) {
  return proto.VehicleData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VehicleData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VehicleData.toObject = function(includeInstance, msg) {
  var f, obj = {
    lastprocessedonserver: jspb.Message.getFieldWithDefault(msg, 1, 0),
    vehiclepartsList: jspb.Message.toObjectList(msg.getVehiclepartsList(),
    proto.VehiclePart.toObject, includeInstance),
    orientationrequested: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    orientation: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    speedmultiplier: +jspb.Message.getFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VehicleData}
 */
proto.VehicleData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VehicleData;
  return proto.VehicleData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VehicleData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VehicleData}
 */
proto.VehicleData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastprocessedonserver(value);
      break;
    case 2:
      var value = new proto.VehiclePart;
      reader.readMessage(value,proto.VehiclePart.deserializeBinaryFromReader);
      msg.addVehicleparts(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOrientationrequested(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOrientation(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpeedmultiplier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VehicleData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VehicleData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VehicleData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VehicleData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLastprocessedonserver();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getVehiclepartsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.VehiclePart.serializeBinaryToWriter
    );
  }
  f = message.getOrientationrequested();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getOrientation();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getSpeedmultiplier();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * optional uint64 lastProcessedOnServer = 1;
 * @return {number}
 */
proto.VehicleData.prototype.getLastprocessedonserver = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.VehicleData.prototype.setLastprocessedonserver = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated VehiclePart vehicleParts = 2;
 * @return {!Array.<!proto.VehiclePart>}
 */
proto.VehicleData.prototype.getVehiclepartsList = function() {
  return /** @type{!Array.<!proto.VehiclePart>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VehiclePart, 2));
};


/** @param {!Array.<!proto.VehiclePart>} value */
proto.VehicleData.prototype.setVehiclepartsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.VehiclePart=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VehiclePart}
 */
proto.VehicleData.prototype.addVehicleparts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.VehiclePart, opt_index);
};


proto.VehicleData.prototype.clearVehiclepartsList = function() {
  this.setVehiclepartsList([]);
};


/**
 * optional float orientationRequested = 3;
 * @return {number}
 */
proto.VehicleData.prototype.getOrientationrequested = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.VehicleData.prototype.setOrientationrequested = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float orientation = 4;
 * @return {number}
 */
proto.VehicleData.prototype.getOrientation = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.VehicleData.prototype.setOrientation = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float speedMultiplier = 5;
 * @return {number}
 */
proto.VehicleData.prototype.getSpeedmultiplier = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.VehicleData.prototype.setSpeedmultiplier = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VehiclePart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VehiclePart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VehiclePart.displayName = 'proto.VehiclePart';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VehiclePart.prototype.toObject = function(opt_includeInstance) {
  return proto.VehiclePart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VehiclePart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VehiclePart.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    y: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    rotation: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    parttype: jspb.Message.getFieldWithDefault(msg, 4, 0),
    partid: jspb.Message.getFieldWithDefault(msg, 11, ""),
    pivotx: jspb.Message.getFieldWithDefault(msg, 12, 0),
    pivoty: jspb.Message.getFieldWithDefault(msg, 13, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VehiclePart}
 */
proto.VehiclePart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VehiclePart;
  return proto.VehiclePart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VehiclePart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VehiclePart}
 */
proto.VehiclePart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRotation(value);
      break;
    case 4:
      var value = /** @type {!proto.VehiclePart.PartType} */ (reader.readEnum());
      msg.setParttype(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartid(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPivotx(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPivoty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VehiclePart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VehiclePart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VehiclePart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VehiclePart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getRotation();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getParttype();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getPartid();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getPivotx();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getPivoty();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.VehiclePart.PartType = {
  HEAD: 0,
  TRAILER: 1,
  FRONT_WHEEL: 2
};

/**
 * optional float x = 1;
 * @return {number}
 */
proto.VehiclePart.prototype.getX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.VehiclePart.prototype.setX = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.VehiclePart.prototype.getY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.VehiclePart.prototype.setY = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float rotation = 3;
 * @return {number}
 */
proto.VehiclePart.prototype.getRotation = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.VehiclePart.prototype.setRotation = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional PartType partType = 4;
 * @return {!proto.VehiclePart.PartType}
 */
proto.VehiclePart.prototype.getParttype = function() {
  return /** @type {!proto.VehiclePart.PartType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.VehiclePart.PartType} value */
proto.VehiclePart.prototype.setParttype = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string partId = 11;
 * @return {string}
 */
proto.VehiclePart.prototype.getPartid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.VehiclePart.prototype.setPartid = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional int32 pivotX = 12;
 * @return {number}
 */
proto.VehiclePart.prototype.getPivotx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.VehiclePart.prototype.setPivotx = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 pivotY = 13;
 * @return {number}
 */
proto.VehiclePart.prototype.getPivoty = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.VehiclePart.prototype.setPivoty = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TimeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TimeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TimeInfo.displayName = 'proto.TimeInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TimeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.TimeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TimeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    initiated: jspb.Message.getFieldWithDefault(msg, 1, 0),
    processing: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TimeInfo}
 */
proto.TimeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TimeInfo;
  return proto.TimeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TimeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TimeInfo}
 */
proto.TimeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInitiated(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setProcessing(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TimeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TimeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TimeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInitiated();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getProcessing();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 initiated = 1;
 * @return {number}
 */
proto.TimeInfo.prototype.getInitiated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.TimeInfo.prototype.setInitiated = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 processing = 2;
 * @return {number}
 */
proto.TimeInfo.prototype.getProcessing = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.TimeInfo.prototype.setProcessing = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Resize = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Resize, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Resize.displayName = 'proto.Resize';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Resize.prototype.toObject = function(opt_includeInstance) {
  return proto.Resize.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Resize} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Resize.toObject = function(includeInstance, msg) {
  var f, obj = {
    width: jspb.Message.getFieldWithDefault(msg, 1, 0),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Resize}
 */
proto.Resize.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Resize;
  return proto.Resize.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Resize} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Resize}
 */
proto.Resize.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Resize.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Resize.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Resize} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Resize.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 width = 1;
 * @return {number}
 */
proto.Resize.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Resize.prototype.setWidth = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 height = 2;
 * @return {number}
 */
proto.Resize.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Resize.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientDisconnect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClientDisconnect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClientDisconnect.displayName = 'proto.ClientDisconnect';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientDisconnect.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientDisconnect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientDisconnect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientDisconnect.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientDisconnect}
 */
proto.ClientDisconnect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientDisconnect;
  return proto.ClientDisconnect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientDisconnect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientDisconnect}
 */
proto.ClientDisconnect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientDisconnect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientDisconnect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientDisconnect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientDisconnect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ClientDisconnect.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ClientDisconnect.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.ClientDisconnect.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ClientDisconnect.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto);
